// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.EMOTICON_MAP = {
    "angry": [">:(", ">_<"],
    "crying": [":'-(", ":'("],
    "surprise": [">:O", ":-O", ":O", ":-o", ":o", "8-0", "O_O", "o-o", "O_o", "o_O", "o_o", "O-O"],
    "tongue": [">:P", ":-P", ":P", "X-P", "x-p", "xp", "XP", ":-p", ":p", "=p", ":-b", ":b", "d:"],
    "laughing": [":-D", ":D", "8-D", "8D", "x-D", "xD", "X-D", "XD", "=-D", "=D", "=-3", "=3"],
    "happy": [":-)", ":)", ":o)", ":]", ":3", ":c)", ":>", "=]", "8)", "=)", ":}"],
    "sad": [">:[", ":-(", ":(", ":-c", ":c", ":-<", ":<", ":-[", ":[", ":{"],
    "wink": [";-)", ";)", "*-)", "*)", ";-]", ";]", ";D", ";^)", ":-,"],
    "uneasy": [">:\\", ">:/", ":-/", ":-.", ":/", ":\\", "=/", "=\\", ":L", "=L", ":S", ">.<"],
    "expressionless": [":|", ":-|"],
    "embarrassed": [":$"],
    "secretive": [":-X", ":X"],
    "heart": ["<3"],
    "broken": ["</3"]
  };

  window.VIDEO_LENGTH_MS = 1000;

  window.NUMBER_WRONG_CHOICES = 3;

  window.FirebaseInteractor = (function() {
    "Connects to Firebase and connects to chatroom variables.";
    function FirebaseInteractor() {
      this.init = __bind(this.init, this);
      this.get_fb_chat_room_id = __bind(this.get_fb_chat_room_id, this);
      this.fb_instance = new Firebase("https://proto1-cs247-p3-fb.firebaseio.com");
    }

    FirebaseInteractor.prototype.get_fb_chat_room_id = function() {
      var url_segments;
      url_segments = document.location.href.split("/#");
      if (url_segments[1]) {
        return url_segments[1];
      }
      return Math.random().toString(36).substring(7);
    };

    FirebaseInteractor.prototype.init = function() {
      this.fb_chat_room_id = this.get_fb_chat_room_id();
      this.fb_new_chat_room = this.fb_instance.child('chatrooms').child(this.fb_chat_room_id);
      this.fb_instance_users = this.fb_new_chat_room.child('users');
      this.fb_instance_stream = this.fb_new_chat_room.child('stream');
      return this.fb_quiz_stream = this.fb_new_chat_room.child('quiz');
    };

    return FirebaseInteractor;

  })();

  window.Quiz = (function() {
    "Builds and renders a single quiz.";
    function Quiz(emoticonAnswer, videoData, fromUser, toUser, elem) {
      this.emoticonAnswer = emoticonAnswer;
      this.videoData = videoData;
      this.fromUser = fromUser;
      this.toUser = toUser;
      this.elem = elem;
      this.makeQuizChoices = __bind(this.makeQuizChoices, this);
      this.render = __bind(this.render, this);
      this.videoBlob = URL.createObjectURL(BlobConverter.base64_to_blob(videoData));
      this.wrongAnswers = [];
    }

    Quiz.prototype.render = function() {
      var context, html;
      context = {
        videoUrl: this.videoBlob,
        fromUser: this.fromUser,
        emoticon: this.emoticonAnswer,
        quizChoices: this.makeQuizChoices(this.emoticonAnswer)
      };
      html = window.Templates["quiz"](context);
      return this.elem.html(html);
    };

    Quiz.prototype.makeQuizChoices = function(actualEmoticon) {
      "Creates a list of emoticon quiz choices, where the other emoticon choices do not express the\nsame emotion as the actual emoticon, or the same emotion as each other.";
      var allChoices, choice, choiceContext;
      this.wrongChoices = EmotionProcessor.chooseEmotionsExcept(actualEmoticon, NUMBER_WRONG_CHOICES);
      allChoices = _.clone(this.wrongChoices);
      allChoices.push(actualEmoticon);
      allChoices = _.shuffle(allChoices);
      choiceContext = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = allChoices.length; _i < _len; _i++) {
          choice = allChoices[_i];
          _results.push({
            "emoticon": choice,
            "correct": choice === actualEmoticon ? "correct" : "wrong"
          });
        }
        return _results;
      })();
      return choiceContext;
    };

    return Quiz;

  })();

  window.QuizCoordinator = (function() {
    "Manipulates Quiz objects for the game.";
    function QuizCoordinator(elem) {
      this.elem = elem;
      this.handleIncomingQuiz = __bind(this.handleIncomingQuiz, this);
      this.giveQuiz = __bind(this.giveQuiz, this);
      this.setUserName = __bind(this.setUserName, this);
      this.respondToAnswerChoice = __bind(this.respondToAnswerChoice, this);
      this.quizProbability = 1;
      this.currentQuiz = null;
      this.username = null;
    }

    QuizCoordinator.prototype.respondToAnswerChoice = function(evt) {
      var isCorrect;
      if (this.currentQuiz === null) {
        return;
      }
      isCorrect = $(evt.target).hasClass("correct");
      if (isCorrect) {
        $("#quiz_container").css({
          "background-color": "green"
        });
      } else {
        $("#quiz_container").css({
          "background-color": "#FFCCCC"
        });
      }
      this.currentQuiz = null;
      return this.elem.addClass("inactive").removeClass("active");
    };

    QuizCoordinator.prototype.setUserName = function(user) {
      return this.username = user;
    };

    QuizCoordinator.prototype.giveQuiz = function(msg) {
      return EmotionProcessor.countEmoticons(msg) === 1;
    };

    QuizCoordinator.prototype.handleIncomingQuiz = function(snapshot) {
      console.log("handling incoming quiz");
      if (this.currentQuiz !== null) {
        return;
      }
      console.log("new quiz!");
      $("#quiz_container").css({
        "background-color": "lightgray"
      });
      console.log(snapshot);
      this.currentQuiz = new Quiz(snapshot.emoticon, snapshot.v, snapshot.fromUser, this.username, this.elem);
      this.elem.addClass("active").removeClass("inactive");
      this.currentQuiz.render();
      return $(".quiz-choice").one("click", this.respondToAnswerChoice);
    };

    return QuizCoordinator;

  })();

  window.ChatRoom = (function() {
    "Main class to control the chat room UI of messages and video";
    function ChatRoom(fbInteractor, videoRecorder) {
      var _this = this;
      this.fbInteractor = fbInteractor;
      this.videoRecorder = videoRecorder;
      this.displayMessage = __bind(this.displayMessage, this);
      this.createVideoElem = __bind(this.createVideoElem, this);
      this.scrollToBottom = __bind(this.scrollToBottom, this);
      this.setupSubmissionBox = __bind(this.setupSubmissionBox, this);
      this.init = __bind(this.init, this);
      this.quizCoordinator = new QuizCoordinator($("#quiz_container"));
      this.fbInteractor.fb_instance_users.on("child_added", function(snapshot) {
        return _this.displayMessage({
          m: snapshot.val().name + " joined the room",
          c: snapshot.val().c
        });
      });
      this.fbInteractor.fb_instance_stream.on("child_added", function(snapshot) {
        return _this.displayMessage(snapshot.val());
      });
      this.fbInteractor.fb_quiz_stream.on("child_added", function(snapshot) {
        return _this.quizCoordinator.handleIncomingQuiz(snapshot.val());
      });
      this.submissionEl = $("#submission input");
    }

    ChatRoom.prototype.init = function() {
      var url;
      url = document.location.origin + "/#" + this.fbInteractor.fb_chat_room_id;
      this.displayMessage({
        m: "Share this url with your friend to join this chat: <a href='" + url + "' target='_blank'>" + url + "</a>",
        c: "darkred"
      });
      if (!this.username) {
        this.username = "anonymous" + Math.floor(Math.random() * 1111);
      }
      this.quizCoordinator.setUserName(this.username);
      this.userColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);
      this.fbInteractor.fb_instance_users.push({
        name: this.username,
        c: this.userColor
      });
      $("#waiting").remove();
      return this.setupSubmissionBox();
    };

    ChatRoom.prototype.setupSubmissionBox = function() {
      var _this = this;
      return $("#submission input").on("keydown", function(event) {
        var message, redactedMessage, _, _ref;
        if (event.which === 13) {
          message = _this.submissionEl.val();
          console.log(message);
          console.log(EmotionProcessor.getEmoticon(message));
          if (_this.quizCoordinator.giveQuiz(message)) {
            console.log("doing quiz");
            _ref = EmotionProcessor.redactEmoticons(message), redactedMessage = _ref[0], _ = _ref[1];
            _this.fbInteractor.fb_instance_stream.push({
              m: _this.username + ": " + redactedMessage,
              c: _this.userColor
            });
            _this.fbInteractor.fb_quiz_stream.push({
              fromUser: _this.username,
              c: _this.userColor,
              v: _this.videoRecorder.curVideoBlob,
              emoticon: EmotionProcessor.getEmoticon(message)
            });
          } else {
            _this.fbInteractor.fb_instance_stream.push({
              m: _this.username + ": " + message,
              c: _this.userColor
            });
          }
          return _this.submissionEl.val("");
        }
      });
    };

    ChatRoom.prototype.scrollToBottom = function(wait_time) {
      var _this = this;
      return setTimeout(function() {
        return $("html, body").animate({
          scrollTop: $(document).height()
        }, 200);
      }, wait_time);
    };

    ChatRoom.prototype.createVideoElem = function(video_data) {
      var source, video;
      video = document.createElement("video");
      video.autoplay = true;
      video.controls = false;
      video.loop = true;
      video.width = 120;
      source = document.createElement("source");
      source.src = URL.createObjectURL(BlobConverter.base64_to_blob(video_data));
      source.type = "video/webm";
      return [source, video];
    };

    ChatRoom.prototype.displayMessage = function(data) {
      var source, video, _ref;
      $("#conversation").append("<div class='msg' style='color:" + data.c + "'>" + data.m + "</div>");
      if (data.v) {
        _ref = this.createVideoElem(data.v), source = _ref[0], video = _ref[1];
        video.appendChild(source);
        document.getElementById("conversation").appendChild(video);
      }
      return this.scrollToBottom(0);
    };

    return ChatRoom;

  })();

  $(document).ready(function() {
    var chatRoom, fbInteractor, videoRecorder;
    fbInteractor = new FirebaseInteractor();
    fbInteractor.init();
    videoRecorder = new VideoRecorder();
    chatRoom = new ChatRoom(fbInteractor, videoRecorder);
    chatRoom.init();
    return videoRecorder.connectWebcam();
  });

}).call(this);
